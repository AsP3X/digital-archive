generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  archiveItems  ArchiveItem[]
  contactForms  ContactForm[]
  pages         Page[]
}

model ArchiveItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // "text" or "image"
  content     String   // URL for images, text content for text items
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Settings {
  id              Int      @id @default(1)
  siteName        String
  siteDescription String
  contactEmail    String
  maxUploadSize   Int
  updatedAt       DateTime @updatedAt
}

model HomeContent {
  id        String   @id @default(cuid())
  type      String   // "heading", "paragraph", or "button"
  content   String
  order     Int
  style     Json?    // Stores style properties as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageComponent {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., "text", "image", "grid", "form"
  config      Json     // Component-specific configuration
  order       Int      // For sorting components on the page
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pageId      String
  page        Page     @relation(fields: [pageId], references: [id])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     Json     // Array of page elements
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  components  PageComponent[]
} 